"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaults = void 0;
const stream_1 = require("stream");
const node_fetch_1 = __importDefault(require("node-fetch"));
const abort_controller_1 = __importDefault(require("abort-controller"));
const https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
const request_helper_1 = require("./request-helper");
const logger_1 = require("./util/logger");
const is_1 = __importDefault(require("@sindresorhus/is"));
/**
 *
 */
let defaults = {};
/**
 *
 */
function setDefaults(defaults_) {
    defaults = defaults_;
}
exports.setDefaults = setDefaults;
/**
 *
 */
async function startFetchRequest(request, options, input, output, emitter, counter = 0) {
    const logger = (0, logger_1.getLogger)('fetch');
    const { httpProxy, followRedirect } = options;
    const agent = httpProxy ? (0, https_proxy_agent_1.default)(httpProxy) : undefined;
    const { url, body, ...rrequest } = request;
    const controller = new abort_controller_1.default();
    let retryCount = 0;
    const retryOpts = {
        maxRetries: options.retry?.maxRetries ?? 5,
        errorCodes: options.retry?.errorCodes ?? [
            'ECONNRESET',
            'ECONNREFUSED',
            'ENOTFOUND',
            'ENETDOWN',
            'ENETUNREACH',
            'EHOSTDOWN',
            'UND_ERR_SOCKET',
            'ETIMEDOUT',
            'EPIPE',
        ],
        methods: options.retry?.methods ?? [
            'GET',
            'PUT',
            'HEAD',
            'OPTIONS',
            'DELETE',
        ],
    };
    const fetchWithRetries = async (maxRetry = retryOpts?.maxRetries) => {
        const fetchOpts = {
            ...rrequest,
            ...(input && /^(post|put|patch)$/i.test(request.method)
                ? { body: input }
                : {}),
            redirect: 'manual',
            signal: controller.signal,
            agent,
        };
        try {
            return await (0, node_fetch_1.default)(url, fetchOpts);
        }
        catch (err) {
            logger.debug(`Request failed`);
            const error = err;
            // request was canceled by consumer (AbortController), skip retry and rethrow.
            if (error.name === 'AbortError') {
                throw error;
            }
            const shouldRetry = () => {
                // only retry on operational errors
                if (error.name != 'FetchError')
                    return false;
                if (retryCount === maxRetry)
                    return false;
                if (!retryOpts?.methods?.includes(request.method))
                    return false;
                if (is_1.default.nodeStream(body) && stream_1.Readable.isDisturbed(body)) {
                    logger.debug('Body of type stream was read, unable to retry request.');
                    return false;
                }
                if ('code' in error &&
                    error.code &&
                    retryOpts?.errorCodes?.includes(error.code))
                    return true;
                return false;
            };
            if (shouldRetry()) {
                logger.debug(`retrying for the ${retryCount + 1} time`);
                logger.debug(`Error: ${error}`);
                // NOTE: this event is only used by tests and will be removed at any time.
                // jsforce may switch to node's fetch which doesn't emit this event on retries.
                emitter.emit('retry', retryCount);
                retryCount++;
                return await fetchWithRetries(maxRetry);
            }
            logger.debug('Skipping retry...');
            throw err;
        }
    };
    let res;
    try {
        res = await (0, request_helper_1.executeWithTimeout)(fetchWithRetries, options.timeout, () => controller.abort());
    }
    catch (err) {
        emitter.emit('error', err);
        return;
    }
    const headers = {};
    for (const headerName of res.headers.keys()) {
        headers[headerName.toLowerCase()] = res.headers.get(headerName);
    }
    const response = {
        statusCode: res.status,
        headers,
    };
    if (followRedirect && (0, request_helper_1.isRedirect)(response.statusCode)) {
        try {
            (0, request_helper_1.performRedirectRequest)(request, response, followRedirect, counter, (req) => startFetchRequest(req, options, undefined, output, emitter, counter + 1));
        }
        catch (err) {
            emitter.emit('error', err);
        }
        return;
    }
    emitter.emit('response', response);
    res.body.pipe(output);
}
/**
 *
 */
function request(req, options_ = {}) {
    const options = { ...defaults, ...options_ };
    const { input, output, stream } = (0, request_helper_1.createHttpRequestHandlerStreams)(req, options);
    startFetchRequest(req, options, input, output, stream);
    return stream;
}
exports.default = request;
