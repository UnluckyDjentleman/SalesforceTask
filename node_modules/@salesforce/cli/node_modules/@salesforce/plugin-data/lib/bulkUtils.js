/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'messages');
export const POLL_FREQUENCY_MS = 5000;
export const isBulkV2RequestDone = (jobInfo) => ['Aborted', 'Failed', 'JobComplete'].includes(jobInfo.state);
export const transformResults = (results) => ({
    // ensureArray is used to handle the undefined or non-array case
    successfulResults: results.successfulResults.map(anyRecordToBulkProcessedRecordV2),
    failedResults: results.failedResults.map(anyRecordToBulkProcessedRecordV2),
    // if the csv can't be read, it returns a string that is the csv body
    ...(typeof results.unprocessedRecords === 'string'
        ? { unprocessedRecords: [], unparsed: results.unprocessedRecords }
        : { unprocessedRecords: results.unprocessedRecords.map(anyRecordToBulkProcessedRecordV2) }),
});
const anyRecordToBulkProcessedRecordV2 = (record) => record;
/** call the describe to verify the object exists in the org  */
export const validateSobjectType = async (sobjectType, connection) => {
    try {
        await connection.sobject(sobjectType).describe();
        return sobjectType;
    }
    catch (e) {
        throw new Error(messages.getMessage('invalidSobject', [sobjectType, e.message]));
    }
};
/** calculate ms between the "now" time and the endWaitTime */
export const remainingTime = (now) => (endWaitTime) => Math.max((endWaitTime ?? now) - now, 0);
//# sourceMappingURL=bulkUtils.js.map