/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import fs from 'node:fs';
import os from 'node:os';
import { Flags } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core';
import { ux } from '@oclif/core';
import { BulkV2, } from '@jsforce/jsforce-node/lib/api/bulk2.js';
import { orgFlags } from './flags.js';
import { BulkDeleteRequestCache, BulkUpsertRequestCache } from './bulkDataRequestCache.js';
import { POLL_FREQUENCY_MS, isBulkV2RequestDone, transformResults, validateSobjectType, remainingTime, } from './bulkUtils.js';
import { displayBulkV2Result, getRemainingTimeStatus, setupLifecycleListeners } from './BulkBaseCommand.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulk.operation.command');
export const baseFlags = {
    ...orgFlags,
    file: Flags.file({
        char: 'f',
        summary: messages.getMessage('flags.csvfile.summary'),
        required: true,
        exists: true,
        aliases: ['csvfile'],
        deprecateAliases: true,
    }),
    sobject: Flags.string({
        char: 's',
        summary: messages.getMessage('flags.sobject.summary'),
        required: true,
        aliases: ['sobjecttype'],
        deprecateAliases: true,
    }),
    wait: Flags.duration({
        char: 'w',
        unit: 'minutes',
        summary: messages.getMessage('flags.wait.summary'),
        min: 0,
        defaultValue: 0,
        exclusive: ['async'],
    }),
    async: Flags.boolean({
        char: 'a',
        summary: messages.getMessage('flags.async.summary'),
        exclusive: ['wait'],
    }),
    verbose: Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
};
export const runBulkOperation = async ({ sobject, csvFileName, connection, wait, verbose, operation, options, cmd, }) => {
    const isAsync = !wait;
    try {
        const [cache] = await Promise.all([getCache(operation), validateSobjectType(sobject, connection)]);
        const csvRecords = fs.createReadStream(csvFileName, { encoding: 'utf-8' });
        cmd.spinner.start(`Running ${isAsync ? 'async ' : ''}bulk ${operation} request`);
        const endWaitTime = Date.now() + wait.milliseconds;
        cmd.spinner.status = getRemainingTimeStatus({ isAsync, endWaitTime });
        const createJobOptions = {
            object: sobject,
            operation,
            externalIdFieldName: options?.extIdField,
            ...(os.platform() === 'win32' ? { lineEnding: 'CRLF' } : {}),
        };
        // @ts-expect-error jsforce 2 vs 3 differences in private stuff inside Connection
        const bulk2 = new BulkV2(connection);
        const job = bulk2.createJob(createJobOptions);
        setupLifecycleListeners({
            job,
            cache,
            username: connection.getUsername(),
            apiVersion: connection.getApiVersion(),
            isAsync,
            cmd,
            endWaitTime,
        });
        try {
            const jobInfo = await executeBulkV2DataRequest(job, csvRecords, endWaitTime);
            if (isAsync) {
                await cache?.createCacheEntryForRequest(job.id ?? '', connection?.getUsername(), connection?.getApiVersion());
            }
            displayBulkV2Result({ jobInfo, isAsync, cmd, username: connection.getUsername() });
            const result = { jobInfo };
            if (!isBulkV2RequestDone(jobInfo)) {
                return result;
            }
            if (cmd.jsonEnabled()) {
                result.records = transformResults(await job.getAllResults());
            }
            // We only print human readable error outputs if --json is not specified.
            // The JSON result itself will already contain the error information (see above).
            else if (verbose) {
                const records = await job.getAllResults();
                if (records?.failedResults?.length > 0) {
                    printBulkErrors(records.failedResults);
                }
            }
            return result;
        }
        catch (err) {
            cmd.spinner.stop();
            throw err;
        }
    }
    finally {
        cmd.spinner.stop();
    }
};
const getCache = async (operation) => {
    switch (operation) {
        case 'delete':
            return BulkDeleteRequestCache.create();
        case 'upsert':
            return BulkUpsertRequestCache.create();
    }
};
/**
 * create and execute batches based on the record arrays; wait for completion response if -w flag is set with > 0 minutes
 * to get proper logging/printing to console pass the instance of UX that called this method
 *
 * @param job {IngestJobV2}
 * @param input
 * @param sobjectType {string}
 * @param wait {number}
 */
const executeBulkV2DataRequest = async (job, input, endWaitTime) => {
    await job.open();
    job.emit('jobProgress', { remainingTime: remainingTime(Date.now())(endWaitTime), stage: 'uploading' });
    await job.uploadData(input);
    job.emit('jobProgress', { remainingTime: remainingTime(Date.now())(endWaitTime), stage: 'uploadComplete' });
    await job.close();
    if (endWaitTime && Date.now() < endWaitTime) {
        await job.poll(POLL_FREQUENCY_MS, remainingTime(Date.now())(endWaitTime));
    }
    return job.check();
};
const printBulkErrors = (failedResults) => {
    const columns = {
        id: { header: 'Id' },
        sfId: { header: 'Sf_Id' },
        error: { header: 'Error' },
    };
    const options = { title: `Bulk Failures [${failedResults.length}]` };
    ux.log();
    ux.table(failedResults.map((f) => ({ id: 'Id' in f ? f.Id : '', sfId: f.sf__Id, error: f.sf__Error })), columns, options);
};
//# sourceMappingURL=bulkOperationCommand.js.map