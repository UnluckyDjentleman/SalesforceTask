"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONStringifyStream = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const stream_1 = require("stream");
const utils_1 = require("../utils");
const core_1 = require("@salesforce/core");
const narrowing_1 = require("../narrowing");
class JSONStringifyStream extends stream_1.Readable {
    sent = false;
    lastYielded;
    object;
    constructor(options) {
        super({ ...options, objectMode: false });
        this.object = options.object;
    }
    *stringify(obj) {
        if ((0, narrowing_1.isObject)(obj)) {
            yield* this.handleObject(obj, true);
        }
        else if ((0, narrowing_1.isArray)(obj)) {
            yield* this.handleArray(obj, true);
        }
        else if ((0, narrowing_1.isPrimitive)(obj)) {
            yield JSON.stringify(obj);
        }
    }
    *yieldWithTracking(value) {
        this.lastYielded = value;
        yield value;
    }
    *handleObject(obj, isLast) {
        yield* this.yieldWithTracking('{');
        const entries = Object.entries(obj);
        for (let index = 0; index < entries.length; index++) {
            const [key, value] = entries[index];
            yield* this.yieldWithTracking(`"${key}":`);
            if ((0, narrowing_1.isObject)(value)) {
                yield* this.handleObject(value, index === entries.length - 1);
            }
            else if ((0, narrowing_1.isArray)(value)) {
                yield* this.handleArray(value, index === entries.length - 1);
            }
            else {
                yield* this.yieldWithTracking(JSON.stringify(value));
            }
            if (index !== entries.length - 1 && this.lastYielded !== ',') {
                yield* this.yieldWithTracking(',');
            }
        }
        yield* this.yieldWithTracking('}');
        if (!isLast && this.lastYielded !== ',') {
            yield* this.yieldWithTracking(',');
        }
    }
    *handleArray(unknownArray, isLast) {
        yield* this.yieldWithTracking('[');
        for (let index = 0; index < unknownArray.length; index++) {
            const entry = unknownArray[index];
            if ((0, narrowing_1.isObject)(entry)) {
                yield* this.handleObject(entry, index === unknownArray.length - 1);
            }
            else if ((0, narrowing_1.isArray)(entry)) {
                yield* this.handleArray(entry, index === unknownArray.length - 1);
            }
            else {
                yield* this.yieldWithTracking(JSON.stringify(entry));
            }
            if (index !== unknownArray.length - 1 && this.lastYielded !== ',') {
                yield* this.yieldWithTracking(',');
            }
        }
        yield* this.yieldWithTracking(']');
        if (!isLast && this.lastYielded !== ',') {
            yield* this.yieldWithTracking(',');
        }
    }
    _read() {
        if (!this.sent) {
            const generator = this.stringify(this.object);
            for (const chunk of generator) {
                this.push(chunk);
            }
            this.sent = true;
        }
        else {
            this.push(null);
        }
    }
    static from(json) {
        return new JSONStringifyStream({ object: json });
    }
}
exports.JSONStringifyStream = JSONStringifyStream;
__decorate([
    (0, utils_1.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], JSONStringifyStream.prototype, "stringify", null);
__decorate([
    (0, utils_1.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], JSONStringifyStream.prototype, "yieldWithTracking", null);
__decorate([
    (0, utils_1.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], JSONStringifyStream.prototype, "handleObject", null);
__decorate([
    (0, utils_1.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], JSONStringifyStream.prototype, "handleArray", null);
//# sourceMappingURL=jsonStringifyStream.js.map