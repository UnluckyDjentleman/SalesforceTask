"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeCoverageStringifyStream = void 0;
/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const stream_1 = require("stream");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const core_1 = require("@salesforce/core"); // replace with your actual import
class CodeCoverageStringifyStream extends stream_1.Transform {
    outerPushed = false;
    pushedInner = false;
    constructor(options) {
        super({ ...options, objectMode: true });
    }
    _transform(chunk, encoding, callback) {
        try {
            // push '[' once to encapsulate the entire result as an array
            if (!this.outerPushed) {
                this.push('[');
                this.outerPushed = true;
            }
            // push a comma between each chunk except for the first one.
            if (this.pushedInner) {
                this.push(',');
            }
            this.pushedInner = true;
            this.push('[');
            // Loop over each PerClassCoverage object in the array
            chunk.forEach((coverage, index) => {
                // Transform the PerClassCoverage object and push it to the readable side of the stream
                this.transformCoverage(coverage);
                if (index < chunk.length - 1) {
                    this.push(',');
                }
            });
            this.push(']');
            callback();
        }
        catch (error) {
            callback(error);
        }
    }
    _flush(callback) {
        // push the closing ']' when the source stream is complete
        if (this.outerPushed) {
            this.push(']');
        }
        callback();
    }
    transformCoverage(perClassCoverage) {
        // Manually construct the string representation of the PerClassCoverage object
        const transformedData = '{';
        const { coverage, ...theRest } = perClassCoverage;
        // stringify all properties except coverage and strip off the closing '}'
        this.push(JSON.stringify(theRest).slice(0, -1));
        this.push(',"coverage": {');
        this.push('"coveredLines": [');
        (0, utils_1.pushArrayToStream)(coverage.coveredLines ?? [], this);
        this.push('],"uncoveredLines": [');
        (0, utils_1.pushArrayToStream)(coverage.uncoveredLines ?? [], this);
        this.push(']}}');
        return transformedData;
    }
}
exports.CodeCoverageStringifyStream = CodeCoverageStringifyStream;
__decorate([
    (0, utils_2.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], CodeCoverageStringifyStream.prototype, "transformCoverage", null);
//# sourceMappingURL=codeCoverageStringifyStream.js.map