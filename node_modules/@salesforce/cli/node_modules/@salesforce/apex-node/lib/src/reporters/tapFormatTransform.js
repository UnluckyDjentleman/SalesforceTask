"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TapFormatTransformer = void 0;
/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const node_stream_1 = require("node:stream");
const utils_1 = require("../utils");
class TapFormatTransformer extends node_stream_1.Readable {
    testResult;
    epilogue;
    constructor(testResult, epilogue, options) {
        super(options);
        this.testResult = testResult;
        this.epilogue = epilogue;
    }
    _read() {
        this.format();
        this.push(null); // Signal the end of the stream
    }
    format() {
        const testPointCount = this.testResult.tests.length;
        this.push(`1..${testPointCount}\n`);
        this.buildTapResults();
        this.epilogue?.forEach((c) => {
            this.push(`# ${c}\n`);
        });
    }
    buildTapResults() {
        this.testResult.tests.forEach((test, index) => {
            const testNumber = index + 1;
            const outcome = test.outcome === "Pass" /* ApexTestResultOutcome.Pass */ ? 'ok' : 'not ok';
            this.push(`${outcome} ${testNumber} ${test.fullName}\n`);
            this.buildTapDiagnostics(test).forEach((s) => {
                this.push(`# ${s}\n`);
            });
        });
    }
    buildTapDiagnostics(testResult) {
        const message = [];
        if (testResult.outcome !== 'Pass') {
            if (testResult.message) {
                const startsWithNewlineRegex = new RegExp(/^[/\r\n|\r|\n]\w*/gim);
                if (startsWithNewlineRegex.test(testResult.message)) {
                    testResult.message.split(/\r\n|\r|\n/g).forEach((msg) => {
                        if (msg && msg.length > 0) {
                            message.push(msg.trim());
                        }
                    });
                }
                else {
                    message.push(testResult.message);
                }
            }
            else {
                message.push('Unknown error');
            }
            if (testResult.stackTrace) {
                testResult.stackTrace.split('\n').forEach((line) => {
                    message.push(line);
                });
            }
        }
        return message;
    }
}
exports.TapFormatTransformer = TapFormatTransformer;
__decorate([
    (0, utils_1.elapsedTime)()
], TapFormatTransformer.prototype, "format", null);
__decorate([
    (0, utils_1.elapsedTime)()
], TapFormatTransformer.prototype, "buildTapResults", null);
__decorate([
    (0, utils_1.elapsedTime)()
], TapFormatTransformer.prototype, "buildTapDiagnostics", null);
//# sourceMappingURL=tapFormatTransform.js.map