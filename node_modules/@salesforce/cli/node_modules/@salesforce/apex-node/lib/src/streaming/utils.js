"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineType = exports.getArrayEntries = exports.getObjectEntries = exports.getComplexEntries = exports.getPrimitiveEntries = exports.pushArrayToStream = void 0;
const narrowing_1 = require("../narrowing");
const pushArrayToStream = (array, stream) => {
    const chunkSize = 1000;
    for (let i = 0; i < array.length; i += chunkSize) {
        const chunk = array.slice(i, i + chunkSize);
        let jsonString = JSON.stringify(chunk);
        jsonString = jsonString.slice(1, -1); // remove '[' and ']'
        stream.push(jsonString);
        if (i + chunkSize < array.length) {
            stream.push(','); // add comma for all but the last chunk
        }
    }
};
exports.pushArrayToStream = pushArrayToStream;
const getPrimitiveEntries = (obj) => {
    return Object.entries(obj).filter((entry) => (0, narrowing_1.isPrimitive)(entry[1]));
};
exports.getPrimitiveEntries = getPrimitiveEntries;
const getComplexEntries = (obj) => {
    return Object.entries(obj).filter((entry) => !(0, narrowing_1.isPrimitive)(entry[1]));
};
exports.getComplexEntries = getComplexEntries;
const getObjectEntries = (obj) => {
    return Object.entries(obj).filter((entry) => (0, narrowing_1.isObject)(entry[1]) && !(0, narrowing_1.isArray)(obj));
};
exports.getObjectEntries = getObjectEntries;
const getArrayEntries = (obj) => {
    return Object.entries(obj).filter((entry) => (0, narrowing_1.isArray)(entry[1]));
};
exports.getArrayEntries = getArrayEntries;
const determineType = (value) => {
    if (Array.isArray(value)) {
        return value.map((val) => typeof val);
    }
    else {
        return typeof value;
    }
};
exports.determineType = determineType;
//# sourceMappingURL=utils.js.map