"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestResultStringifyStream = void 0;
/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const node_stream_1 = require("node:stream");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
class TestResultStringifyStream extends node_stream_1.Readable {
    testResult;
    constructor(testResult, options) {
        super({ ...options, objectMode: true });
        this.testResult = testResult;
        this.testResult = testResult;
    }
    _read() {
        this.format();
        this.push(null); // Signal the end of the stream
    }
    format() {
        const { summary } = this.testResult;
        // strip out vars not included in the summary data reported to the user
        // outer curly
        this.push('{');
        // summary
        this.push(`"summary": ${JSON.stringify(summary)},`);
        this.buildTests();
        this.buildCodeCoverage();
        // closing outer curly
        this.push(`}`);
    }
    buildTests() {
        this.push('"tests":[');
        const numberOfTests = this.testResult.tests.length - 1;
        this.testResult.tests.forEach((test, index) => {
            const { perClassCoverage, ...testRest } = test;
            this.push(`${JSON.stringify(testRest).slice(0, -1)},`);
            if (perClassCoverage) {
                const numberOfPerClassCoverage = perClassCoverage.length - 1;
                this.push('"perClassCoverage": [');
                perClassCoverage.forEach((pcc, index) => {
                    const { coverage, ...coverageRest } = pcc;
                    this.push(`${JSON.stringify(coverageRest).slice(0, -1)},`);
                    this.push(`"coverage": ${JSON.stringify(coverage)}}`);
                    if (numberOfPerClassCoverage !== index) {
                        this.push(',');
                    }
                });
                this.push('],');
            }
            // close the tests
            this.push('}');
            if (numberOfTests !== index) {
                this.push(',');
            }
        });
        this.push('],');
    }
    buildCodeCoverage() {
        if (this.testResult.codecoverage) {
            this.push('"codecoverage":[');
            const numberOfCodeCoverage = this.testResult.codecoverage.length - 1;
            this.testResult.codecoverage.forEach((coverage, index) => {
                const { coveredLines, uncoveredLines, ...theRest } = coverage;
                this.push(`${JSON.stringify(theRest).slice(0, -1)},`);
                this.push('"coveredLines":[');
                (0, utils_1.pushArrayToStream)(coveredLines, this);
                this.push('],"uncoveredLines":[');
                (0, utils_1.pushArrayToStream)(uncoveredLines, this);
                this.push(']}');
                if (numberOfCodeCoverage !== index) {
                    this.push(',');
                }
            });
            this.push(']');
        }
    }
    static fromTestResult(testResult) {
        return new TestResultStringifyStream(testResult);
    }
}
exports.TestResultStringifyStream = TestResultStringifyStream;
__decorate([
    (0, utils_2.elapsedTime)()
], TestResultStringifyStream.prototype, "format", null);
__decorate([
    (0, utils_2.elapsedTime)()
], TestResultStringifyStream.prototype, "buildTests", null);
__decorate([
    (0, utils_2.elapsedTime)()
], TestResultStringifyStream.prototype, "buildCodeCoverage", null);
//# sourceMappingURL=testResultStringifyStream.js.map